// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/yangzhicheng/go/pkg/mod/github.com/!n!u!s-!i!s!s-!agile-!team/ceramicraft-payment-mservice/common@v1.0.5-0.20251006135536-e0bafdaafee0/paymentpb/payment_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	paymentpb "github.com/NUS-ISS-Agile-Team/ceramicraft-payment-mservice/common/paymentpb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPaymentServiceClient is a mock of PaymentServiceClient interface.
type MockPaymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceClientMockRecorder
}

// MockPaymentServiceClientMockRecorder is the mock recorder for MockPaymentServiceClient.
type MockPaymentServiceClientMockRecorder struct {
	mock *MockPaymentServiceClient
}

// NewMockPaymentServiceClient creates a new mock instance.
func NewMockPaymentServiceClient(ctrl *gomock.Controller) *MockPaymentServiceClient {
	mock := &MockPaymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceClient) EXPECT() *MockPaymentServiceClientMockRecorder {
	return m.recorder
}

// PayOrder mocks base method.
func (m *MockPaymentServiceClient) PayOrder(ctx context.Context, in *paymentpb.PayOrderRequest, opts ...grpc.CallOption) (*paymentpb.PayOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PayOrder", varargs...)
	ret0, _ := ret[0].(*paymentpb.PayOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockPaymentServiceClientMockRecorder) PayOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockPaymentServiceClient)(nil).PayOrder), varargs...)
}

// QueryPayOrder mocks base method.
func (m *MockPaymentServiceClient) QueryPayOrder(ctx context.Context, in *paymentpb.PayOrderQueryRequest, opts ...grpc.CallOption) (*paymentpb.PayOrderQueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryPayOrder", varargs...)
	ret0, _ := ret[0].(*paymentpb.PayOrderQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPayOrder indicates an expected call of QueryPayOrder.
func (mr *MockPaymentServiceClientMockRecorder) QueryPayOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPayOrder", reflect.TypeOf((*MockPaymentServiceClient)(nil).QueryPayOrder), varargs...)
}

// MockPaymentServiceServer is a mock of PaymentServiceServer interface.
type MockPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceServerMockRecorder
}

// MockPaymentServiceServerMockRecorder is the mock recorder for MockPaymentServiceServer.
type MockPaymentServiceServerMockRecorder struct {
	mock *MockPaymentServiceServer
}

// NewMockPaymentServiceServer creates a new mock instance.
func NewMockPaymentServiceServer(ctrl *gomock.Controller) *MockPaymentServiceServer {
	mock := &MockPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentServiceServer) EXPECT() *MockPaymentServiceServerMockRecorder {
	return m.recorder
}

// PayOrder mocks base method.
func (m *MockPaymentServiceServer) PayOrder(arg0 context.Context, arg1 *paymentpb.PayOrderRequest) (*paymentpb.PayOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOrder", arg0, arg1)
	ret0, _ := ret[0].(*paymentpb.PayOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockPaymentServiceServerMockRecorder) PayOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockPaymentServiceServer)(nil).PayOrder), arg0, arg1)
}

// QueryPayOrder mocks base method.
func (m *MockPaymentServiceServer) QueryPayOrder(arg0 context.Context, arg1 *paymentpb.PayOrderQueryRequest) (*paymentpb.PayOrderQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPayOrder", arg0, arg1)
	ret0, _ := ret[0].(*paymentpb.PayOrderQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPayOrder indicates an expected call of QueryPayOrder.
func (mr *MockPaymentServiceServerMockRecorder) QueryPayOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPayOrder", reflect.TypeOf((*MockPaymentServiceServer)(nil).QueryPayOrder), arg0, arg1)
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockPaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockPaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}

// MockUnsafePaymentServiceServer is a mock of UnsafePaymentServiceServer interface.
type MockUnsafePaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePaymentServiceServerMockRecorder
}

// MockUnsafePaymentServiceServerMockRecorder is the mock recorder for MockUnsafePaymentServiceServer.
type MockUnsafePaymentServiceServerMockRecorder struct {
	mock *MockUnsafePaymentServiceServer
}

// NewMockUnsafePaymentServiceServer creates a new mock instance.
func NewMockUnsafePaymentServiceServer(ctrl *gomock.Controller) *MockUnsafePaymentServiceServer {
	mock := &MockUnsafePaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePaymentServiceServer) EXPECT() *MockUnsafePaymentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPaymentServiceServer mocks base method.
func (m *MockUnsafePaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPaymentServiceServer")
}

// mustEmbedUnimplementedPaymentServiceServer indicates an expected call of mustEmbedUnimplementedPaymentServiceServer.
func (mr *MockUnsafePaymentServiceServerMockRecorder) mustEmbedUnimplementedPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPaymentServiceServer", reflect.TypeOf((*MockUnsafePaymentServiceServer)(nil).mustEmbedUnimplementedPaymentServiceServer))
}
