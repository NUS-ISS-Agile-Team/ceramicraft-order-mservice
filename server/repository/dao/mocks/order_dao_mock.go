// Code generated by MockGen. DO NOT EDIT.
// Source: dao/order_dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/NUS-ISS-Agile-Team/ceramicraft-order-mservice/server/repository/dao"
	model "github.com/NUS-ISS-Agile-Team/ceramicraft-order-mservice/server/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderDao is a mock of OrderDao interface.
type MockOrderDao struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDaoMockRecorder
}

// MockOrderDaoMockRecorder is the mock recorder for MockOrderDao.
type MockOrderDaoMockRecorder struct {
	mock *MockOrderDao
}

// NewMockOrderDao creates a new mock instance.
func NewMockOrderDao(ctrl *gomock.Controller) *MockOrderDao {
	mock := &MockOrderDao{ctrl: ctrl}
	mock.recorder = &MockOrderDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDao) EXPECT() *MockOrderDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderDao) Create(ctx context.Context, order *model.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderDaoMockRecorder) Create(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderDao)(nil).Create), ctx, order)
}

// GetByOrderNo mocks base method.
func (m *MockOrderDao) GetByOrderNo(ctx context.Context, orderNo int) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderNo", ctx, orderNo)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderNo indicates an expected call of GetByOrderNo.
func (mr *MockOrderDaoMockRecorder) GetByOrderNo(ctx, orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderNo", reflect.TypeOf((*MockOrderDao)(nil).GetByOrderNo), ctx, orderNo)
}

// GetByOrderQuery mocks base method.
func (m *MockOrderDao) GetByOrderQuery(ctx context.Context, query dao.OrderQuery) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderQuery", ctx, query)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderQuery indicates an expected call of GetByOrderQuery.
func (mr *MockOrderDaoMockRecorder) GetByOrderQuery(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderQuery", reflect.TypeOf((*MockOrderDao)(nil).GetByOrderQuery), ctx, query)
}

// UpdateStatus mocks base method.
func (m *MockOrderDao) UpdateStatus(ctx context.Context, orderNo int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, orderNo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderDaoMockRecorder) UpdateStatus(ctx, orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderDao)(nil).UpdateStatus), ctx, orderNo)
}
