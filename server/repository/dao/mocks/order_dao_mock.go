// Code generated by MockGen. DO NOT EDIT.
// Source: ./dao/order_dao.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	dao "github.com/NUS-ISS-Agile-Team/ceramicraft-order-mservice/server/repository/dao"
	model "github.com/NUS-ISS-Agile-Team/ceramicraft-order-mservice/server/repository/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderDao is a mock of OrderDao interface.
type MockOrderDao struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDaoMockRecorder
}

// MockOrderDaoMockRecorder is the mock recorder for MockOrderDao.
type MockOrderDaoMockRecorder struct {
	mock *MockOrderDao
}

// NewMockOrderDao creates a new mock instance.
func NewMockOrderDao(ctrl *gomock.Controller) *MockOrderDao {
	mock := &MockOrderDao{ctrl: ctrl}
	mock.recorder = &MockOrderDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDao) EXPECT() *MockOrderDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderDao) Create(ctx context.Context, o *model.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, o)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderDaoMockRecorder) Create(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderDao)(nil).Create), ctx, o)
}

// GetByOrderNo mocks base method.
func (m *MockOrderDao) GetByOrderNo(ctx context.Context, orderNo string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderNo", ctx, orderNo)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderNo indicates an expected call of GetByOrderNo.
func (mr *MockOrderDaoMockRecorder) GetByOrderNo(ctx, orderNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderNo", reflect.TypeOf((*MockOrderDao)(nil).GetByOrderNo), ctx, orderNo)
}

// GetByOrderQuery mocks base method.
func (m *MockOrderDao) GetByOrderQuery(ctx context.Context, query dao.OrderQuery) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderQuery", ctx, query)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderQuery indicates an expected call of GetByOrderQuery.
func (mr *MockOrderDaoMockRecorder) GetByOrderQuery(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderQuery", reflect.TypeOf((*MockOrderDao)(nil).GetByOrderQuery), ctx, query)
}

// UpdateStatusAndConfirmTime mocks base method.
func (m *MockOrderDao) UpdateStatusAndConfirmTime(ctx context.Context, orderNo string, status int, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndConfirmTime", ctx, orderNo, status, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusAndConfirmTime indicates an expected call of UpdateStatusAndConfirmTime.
func (mr *MockOrderDaoMockRecorder) UpdateStatusAndConfirmTime(ctx, orderNo, status, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndConfirmTime", reflect.TypeOf((*MockOrderDao)(nil).UpdateStatusAndConfirmTime), ctx, orderNo, status, t)
}

// UpdateStatusAndPayment mocks base method.
func (m *MockOrderDao) UpdateStatusAndPayment(ctx context.Context, orderNo string, status int, payTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndPayment", ctx, orderNo, status, payTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusAndPayment indicates an expected call of UpdateStatusAndPayment.
func (mr *MockOrderDaoMockRecorder) UpdateStatusAndPayment(ctx, orderNo, status, payTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndPayment", reflect.TypeOf((*MockOrderDao)(nil).UpdateStatusAndPayment), ctx, orderNo, status, payTime)
}

// UpdateStatusWithDeliveryInfo mocks base method.
func (m *MockOrderDao) UpdateStatusWithDeliveryInfo(ctx context.Context, orderNo string, status int, t time.Time, shippingNo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusWithDeliveryInfo", ctx, orderNo, status, t, shippingNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusWithDeliveryInfo indicates an expected call of UpdateStatusWithDeliveryInfo.
func (mr *MockOrderDaoMockRecorder) UpdateStatusWithDeliveryInfo(ctx, orderNo, status, t, shippingNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusWithDeliveryInfo", reflect.TypeOf((*MockOrderDao)(nil).UpdateStatusWithDeliveryInfo), ctx, orderNo, status, t, shippingNo)
}
